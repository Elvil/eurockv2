/* 
 * $Id$
 * 
 * Copyright (c) 2014-15 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.vi51.project.^agent

import fr.utbm.info.vi51.framework.^agent.AbstractAnimat
import fr.utbm.info.vi51.framework.^agent.PhysicEnvironment
import fr.utbm.info.vi51.framework.environment.DynamicType
import fr.utbm.info.vi51.framework.environment.PerceptionEvent
import fr.utbm.info.vi51.framework.environment.SimulationAgentReady
import fr.utbm.info.vi51.framework.math.MathUtil
import fr.utbm.info.vi51.general.^behavior.FleeBehaviour
import fr.utbm.info.vi51.general.^behavior.SeekBehaviour
import fr.utbm.info.vi51.general.^behavior.WanderBehaviour
import fr.utbm.info.vi51.general.^behavior.kinematic.KinematicFleeBehaviour
import fr.utbm.info.vi51.general.^behavior.kinematic.KinematicSeekBehaviour
import fr.utbm.info.vi51.general.^behavior.kinematic.KinematicWanderBehaviour
import fr.utbm.info.vi51.general.^behavior.steering.SteeringFleeBehaviour
import fr.utbm.info.vi51.general.^behavior.steering.SteeringSeekBehaviour
import fr.utbm.info.vi51.general.^behavior.steering.SteeringWanderBehaviour
import fr.utbm.info.vi51.general.influence.TypeChangeInfluence
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import fr.utbm.info.vi51.general.^behavior.AlertBehaviour
import fr.utbm.info.vi51.project.environment.State;

agent SecurityAgent extends AbstractAnimat {
	
	uses PhysicEnvironment, Lifecycle, DefaultContextInteractions
	
	var seekBehaviour : SeekBehaviour
	var fleeBehaviour : FleeBehaviour
	var wanderBehaviour : WanderBehaviour
	var watchAlert : AlertBehaviour
	
	val STOP_RADIUS = MathUtil.PI/10f
	val SLOW_RADIUS = MathUtil.PI/4f
	val WANDER_CIRCLE_DISTANCE = 20f
	val WANDER_CIRCLE_RADIUS = 10f
	val WANDER_MAX_ROTATION = MathUtil.PI/4f
	
	on Initialize {
		super._handle_Initialize_0(occurrence)
		if (this.behaviorType == DynamicType::STEERING) {
			this.seekBehaviour = new SteeringSeekBehaviour
			this.fleeBehaviour = new SteeringFleeBehaviour
			this.wanderBehaviour = new SteeringWanderBehaviour(
					WANDER_CIRCLE_DISTANCE, 
					WANDER_CIRCLE_RADIUS, 
					WANDER_MAX_ROTATION,
					STOP_RADIUS,
					SLOW_RADIUS)
			this.watchAlert = new AlertBehaviour();
		}
		else {
			this.seekBehaviour =  new KinematicSeekBehaviour
			this.fleeBehaviour =  new KinematicFleeBehaviour
			this.wanderBehaviour = new KinematicWanderBehaviour
		} 
		emit(new SimulationAgentReady)
	}
		
	on PerceptionEvent {
		var target = occurrence.perceptions.first
		
		
		/*if (target === null) {*/
		if(watchAlert.runAlert(occurrence.perceptions)){
			emitInfluence(
				this.seekBehaviour.runSeek(
					occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinear,
					target.position
				),
				new TypeChangeInfluence("RAVENOUS")
			)
			//print('je suis sencer ne rien faire ...')
			//occurrence.body.setState(State.ALERTED)
		}else{
			emitInfluence(
				this.wanderBehaviour.runWander(
				occurrence.body.position,
				occurrence.body.direction,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinear,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngular
				),
				new TypeChangeInfluence("BODY")
			)
			}
		/*} else if (target.type == "TARGET") {
			emitInfluence(
				this.seekBehaviour.runSeek(
					occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinear,
					target.position
				),
				new TypeChangeInfluence("RAVENOUS")
			)
		} else {
			emitInfluence(
				this.fleeBehaviour.runFlee(
					occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinear,
					target.position
				),
				new TypeChangeInfluence("SCARED")
			)
		}*/
	}

}