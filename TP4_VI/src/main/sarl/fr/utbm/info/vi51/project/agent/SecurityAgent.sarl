/* 
 * $Id$
 * 
 * Copyright (c) 2014-15 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.vi51.project.^agent

import fr.utbm.info.vi51.framework.^agent.AbstractAnimat
import fr.utbm.info.vi51.framework.^agent.PhysicEnvironment
import fr.utbm.info.vi51.framework.environment.DynamicType
import fr.utbm.info.vi51.framework.environment.PerceptionEvent
import fr.utbm.info.vi51.framework.environment.SimulationAgentReady
import fr.utbm.info.vi51.framework.math.MathUtil
import fr.utbm.info.vi51.framework.math.Point2f
import fr.utbm.info.vi51.general.^behavior.FleeBehaviour
import fr.utbm.info.vi51.general.^behavior.LiveBehaviour
import fr.utbm.info.vi51.general.^behavior.SecurityBehaviour
import fr.utbm.info.vi51.general.^behavior.SeekBehaviour
import fr.utbm.info.vi51.general.^behavior.WanderBehaviour
import fr.utbm.info.vi51.general.^behavior.kinematic.KinematicFleeBehaviour
import fr.utbm.info.vi51.general.^behavior.kinematic.KinematicSeekBehaviour
import fr.utbm.info.vi51.general.^behavior.kinematic.KinematicWanderBehaviour
import fr.utbm.info.vi51.general.^behavior.steering.SteeringFleeBehaviour
import fr.utbm.info.vi51.general.^behavior.steering.SteeringSeekBehaviour
import fr.utbm.info.vi51.general.^behavior.steering.SteeringWanderBehaviour
import fr.utbm.info.vi51.general.influence.NullInfluence
import fr.utbm.info.vi51.general.influence.TypeChangeInfluence
import fr.utbm.info.vi51.project.environment.Semantics
import fr.utbm.info.vi51.project.environment.State
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle

agent SecurityAgent extends AbstractAnimat {
	uses PhysicEnvironment, Lifecycle, DefaultContextInteractions
	var seekBehaviour : SeekBehaviour ;
	var fleeBehaviour : FleeBehaviour ;
	var wanderBehaviour : WanderBehaviour ;
	var securityAlert : SecurityBehaviour ;
	var liveBehaviour : LiveBehaviour
	var isAlive = true
	val STOP_RADIUS = MathUtil.PI / 8f
	val SLOW_RADIUS = MathUtil.PI / 2f
	val WANDER_CIRCLE_DISTANCE = 20f
	val WANDER_CIRCLE_RADIUS = 10f
	val WANDER_MAX_ROTATION = MathUtil.PI / 4f

	on Initialize {
		super._handle_Initialize_0(occurrence)
		if(this.behaviorType == DynamicType::STEERING) {
			this.seekBehaviour = new SteeringSeekBehaviour;
			this.fleeBehaviour = new SteeringFleeBehaviour;
			this.wanderBehaviour = new SteeringWanderBehaviour(WANDER_CIRCLE_DISTANCE,
			WANDER_CIRCLE_RADIUS,
			WANDER_MAX_ROTATION,
			STOP_RADIUS,
			SLOW_RADIUS);
			this.securityAlert = new SecurityBehaviour(50F);
		}
		else {
			this.seekBehaviour = new KinematicSeekBehaviour this.fleeBehaviour = new KinematicFleeBehaviour this.wanderBehaviour = new KinematicWanderBehaviour
		}
		this.liveBehaviour = new LiveBehaviour();
		emit(new SimulationAgentReady)
	}

	on PerceptionEvent {
if (isAlive)
		{
			isAlive = this.liveBehaviour.isAlive(occurrence.body.position, occurrence.perceptions);
		if (isAlive)
		{
		var target = occurrence.perceptions.first
		var boolWander = true;
		var posBomb : Point2f;
		var positionCopain : Point2f;
		if(target !== null) {
		//Si la bombe est proche et que il y a personne d'autre plus proche alors il vois la bombe
			if(securityAlert.runAlert(occurrence.body.position, occurrence.perceptions) || occurrence.body.type.equals(State.ALERTED_OUT) || securityAlert.getBombFind ) {
				posBomb = this.securityAlert.followAgent(occurrence.body.position, occurrence.perceptions)
				positionCopain = this.securityAlert.fleeAgent(occurrence.body.position, occurrence.perceptions);
				if(posBomb.getX() != 0) {
					emitInfluence(this.seekBehaviour.runSeek(occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinearSpeed,
					posBomb),
					new TypeChangeInfluence(State.ALERTED_OUT))
				} else
				{
					emitInfluence(this.wanderBehaviour.runWander(occurrence.body.position,
					occurrence.body.direction,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinearSpeed,
					occurrence.body.currentAngularSpeed,
					occurrence.body.maxAngularSpeed),
					new TypeChangeInfluence(State.ALERTED_OUT))
				}
				boolWander = false;
			}
			else {

				if(occurrence.body.type == State.HUNGRY && target.name.equals(Semantics.STAND_MIAM))
				{
					emitInfluence(this.seekBehaviour.runSeek(occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinearSpeed,
					target.position),
					new TypeChangeInfluence(occurrence.body.type))
					boolWander = false;
				}

				if(occurrence.body.type == State.SEARCH_WATCHING && target.name.equals(Semantics.SCENE_PLAGE))
				{
					emitInfluence(this.seekBehaviour.runSeek(occurrence.body.position,
					occurrence.body.currentLinearSpeed,
					occurrence.body.maxLinearSpeed,
					target.position),
					new TypeChangeInfluence(occurrence.body.type))
					boolWander = false;
				}

			}

		}

		if(boolWander) {
			emitInfluence(this.wanderBehaviour.runWander(occurrence.body.position,
			occurrence.body.direction,
			occurrence.body.currentLinearSpeed,
			occurrence.body.maxLinearSpeed,
			occurrence.body.currentAngularSpeed,
			occurrence.body.maxAngularSpeed),
			new TypeChangeInfluence(occurrence.body.type))

		}
	}
		else
		{
			print("Mort \n")
				emitInfluence(null, new NullInfluence())
			if (!occurrence.body.type.equals(State.DEAD))
				emitInfluence(null, new TypeChangeInfluence(State.DEAD))	
		}
	}
	else
	{
			if (!occurrence.body.type.equals(State.DEAD))
				emitInfluence(null, new TypeChangeInfluence(State.DEAD))	
			emitInfluence(null, new NullInfluence())
		
	}
	}
}